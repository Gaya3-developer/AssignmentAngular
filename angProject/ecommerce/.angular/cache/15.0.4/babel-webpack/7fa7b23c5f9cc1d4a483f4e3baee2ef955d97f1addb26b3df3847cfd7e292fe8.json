{"ast":null,"code":"import { createUserWithEmailAndPassword, getAuth, signInWithEmailAndPassword, signOut } from 'firebase/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n    this.isAuthenticated = false;\n    this.isLoading = false;\n    this.passwordMatched = true;\n  }\n  login(form) {\n    if (this.isLoading) return;\n    this.isLoading = true;\n    const auth = getAuth();\n    signInWithEmailAndPassword(auth, form.email, form.password).then(userCredential => {\n      this.isAuthenticated = true;\n      this.router.navigate(['']);\n    }).catch(error => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      this.isAuthenticated = false;\n    }).finally(() => this.isLoading = false);\n  }\n  register(form) {\n    if (this.isLoading) return;\n    this.isLoading = true;\n    if (form.password !== form.confirm_password) {\n      this.passwordMatched = false;\n      return;\n    }\n    const auth = getAuth();\n    createUserWithEmailAndPassword(auth, form.email, form.password).then(userCredential => {\n      this.isAuthenticated = true;\n    }).catch(error => {\n      this.isAuthenticated = false;\n      const errorCode = error.code;\n      const errorMessage = error.message;\n    }).finally(() => this.isLoading = false);\n  }\n  logout() {\n    const auth = getAuth();\n    signOut(auth).then(() => {\n      this.router.navigate(['login']);\n      this.isAuthenticated = false;\n    }).catch(error => {\n      // An error happened.\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SACEA,8BAA8B,EAC9BC,OAAO,EACPC,0BAA0B,EAC1BC,OAAO,QACF,eAAe;;;AAMtB,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;IAH1B,oBAAe,GAAY,KAAK;IAChC,cAAS,GAAY,KAAK;IAuB1B,oBAAe,GAAY,IAAI;EArBM;EAErCC,KAAK,CAACC,IAAe;IACnB,IAAI,IAAI,CAACC,SAAS,EAAE;IAEpB,IAAI,CAACA,SAAS,GAAG,IAAI;IAErB,MAAMC,IAAI,GAAGT,OAAO,EAAE;IACtBC,0BAA0B,CAACQ,IAAI,EAAEF,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACI,QAAQ,CAAC,CACxDC,IAAI,CAAEC,cAAc,IAAI;MACvB,IAAI,CAACC,eAAe,GAAG,IAAI;MAC3B,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAI;MACf,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI;MAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;MAClC,IAAI,CAACP,eAAe,GAAG,KAAK;IAC9B,CAAC,CAAC,CACDQ,OAAO,CAAC,MAAO,IAAI,CAACd,SAAS,GAAG,KAAM,CAAC;EAC5C;EAGAe,QAAQ,CAAChB,IAAkB;IACzB,IAAI,IAAI,CAACC,SAAS,EAAE;IAEpB,IAAI,CAACA,SAAS,GAAG,IAAI;IAErB,IAAID,IAAI,CAACI,QAAQ,KAAKJ,IAAI,CAACiB,gBAAgB,EAAE;MAC3C,IAAI,CAACC,eAAe,GAAG,KAAK;MAC5B;;IAGF,MAAMhB,IAAI,GAAGT,OAAO,EAAE;IACtBD,8BAA8B,CAACU,IAAI,EAAEF,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACI,QAAQ,CAAC,CAC5DC,IAAI,CAAEC,cAAc,IAAI;MACvB,IAAI,CAACC,eAAe,GAAG,IAAI;IAC7B,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAI;MACf,IAAI,CAACH,eAAe,GAAG,KAAK;MAC5B,MAAMI,SAAS,GAAGD,KAAK,CAACE,IAAI;MAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;IACpC,CAAC,CAAC,CACDC,OAAO,CAAC,MAAO,IAAI,CAACd,SAAS,GAAG,KAAM,CAAC;EAC5C;EAEAkB,MAAM;IACJ,MAAMjB,IAAI,GAAGT,OAAO,EAAE;IACtBE,OAAO,CAACO,IAAI,CAAC,CACVG,IAAI,CAAC,MAAK;MACT,IAAI,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,IAAI,CAACD,eAAe,GAAG,KAAK;IAC9B,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAI;MACf;IAAA,CACD,CAAC;EACN;;AA3DWd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["createUserWithEmailAndPassword","getAuth","signInWithEmailAndPassword","signOut","AuthService","constructor","router","login","form","isLoading","auth","email","password","then","userCredential","isAuthenticated","navigate","catch","error","errorCode","code","errorMessage","message","finally","register","confirm_password","passwordMatched","logout","factory","providedIn"],"sourceRoot":"","sources":["/home/user/Desktop/angProject/ecommerce/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  createUserWithEmailAndPassword,\n  getAuth,\n  signInWithEmailAndPassword,\n  signOut,\n} from 'firebase/auth';\nimport { LoginForm, RegisterForm } from '../types/Auth';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  isAuthenticated: boolean = false;\n  isLoading: boolean = false;\n\n  constructor(private router: Router) {}\n\n  login(form: LoginForm) {\n    if (this.isLoading) return;\n\n    this.isLoading = true;\n\n    const auth = getAuth();\n    signInWithEmailAndPassword(auth, form.email, form.password)\n      .then((userCredential) => {\n        this.isAuthenticated = true;\n        this.router.navigate(['']);\n      })\n      .catch((error) => {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        this.isAuthenticated = false;\n      })\n      .finally(() => (this.isLoading = false));\n  }\n\n  passwordMatched: boolean = true;\n  register(form: RegisterForm) {\n    if (this.isLoading) return;\n\n    this.isLoading = true;\n\n    if (form.password !== form.confirm_password) {\n      this.passwordMatched = false;\n      return;\n    }\n\n    const auth = getAuth();\n    createUserWithEmailAndPassword(auth, form.email, form.password)\n      .then((userCredential) => {\n        this.isAuthenticated = true;\n      })\n      .catch((error) => {\n        this.isAuthenticated = false;\n        const errorCode = error.code;\n        const errorMessage = error.message;\n      })\n      .finally(() => (this.isLoading = false));\n  }\n\n  logout() {\n    const auth = getAuth();\n    signOut(auth)\n      .then(() => {\n        this.router.navigate(['login']);\n        this.isAuthenticated = false;\n      })\n      .catch((error) => {\n        // An error happened.\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}